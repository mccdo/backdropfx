
// Copyright (c) 2010 Skew Matrix Software. All rights reserved.
// gl2/ffp-declarations.common


//
// Constants
// WARNING: Must keep synch'd with (host code) ShaderLibraryConstants.h
const int bdfx_maxTextureUnits = 4;
const int bdfx_maxTextureCoords = 8;
const int bdfx_maxClipPlanes = 8;
const int bdfx_maxLights = 8;
// Reserve special texture coord sets
const int bdfx_streamlineImageUnit = 7;


//
// Input uniforms.
// Use #define so that we can use consistent internal names
// to minimize code changes between GL2 and GL3.
#define bdfx_modelViewMatrix gl_ModelViewMatrix
#define bdfx_modelViewProjectionMatrix gl_ModelViewProjectionMatrix
#define bdfx_projectionMatrix gl_ProjectionMatrix
#define bdfx_modelViewMatrixInverse gl_ModelViewMatrixInverse
#define bdfx_modelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse
#define bdfx_projectionMatrixInverse gl_ProjectionMatrixInverse
#define bdfx_modelViewMatrixTranspose gl_ModelViewMatrixTranspose
#define bdfx_modelViewProjectionMatrixTranspose gl_ModelViewProjectionMatrixTranspose
#define bdfx_projectionMatrixTranspose gl_ProjectionMatrixTranspose
#define bdfx_modelViewMatrixInverseTranspose gl_ModelViewMatrixInverseTranspose
#define bdfx_modelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixInverseTranspose
#define bdfx_projectionMatrixInverseTranspose gl_ProjectionMatrixInverseTranspose
#define bdfx_textureMatrix gl_TextureMatrix
#define bdfx_textureMatrixInverse gl_TextureMatrixInverse
#define bdfx_textureMatrixTranspose gl_TextureMatrixTranspose
#define bdfx_textureMatrixInverseTranspose gl_TextureMatrixInverseTranspose
#define bdfx_normalMatrix gl_NormalMatrix
#define bdfx_normalScale gl_NormalScale


//
// Input OSG uniforms.
uniform int osg_FrameNumber;
uniform float osg_FrameTime;
uniform float osg_DeltaFrameTime;
uniform float osg_SimulationTime;
uniform mat4 osg_ViewMatrix;
uniform mat4 osg_ViewMatrixInverse;


//
// Input uniforms. These uniforms are written by the FFP emulation shaders.

// light source
struct bdfx_lightSourceParameters {
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
    vec4 position;
    vec3 halfVector;
    vec3 spotDirection;
    float spotExponent;
    float spotCutoff;
    float spotCosCutoff;
    float constantAttenuation;
    float linearAttenuation;
    float quadraticAttenuation;
    int absolute;
};
uniform bdfx_lightSourceParameters bdfx_lightSource[ bdfx_maxLights ];
uniform int bdfx_lightEnable[ bdfx_maxLights ];

// light model
struct bdfx_lightModelParameters {
    vec4 ambient;
    int localViewer;
    int separateSpecular;
    int twoSided;
};
uniform bdfx_lightModelParameters bdfx_lightModel;

// material
struct bdfx_materialParameters {
    vec4 emissive;
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
    float shininess;
};
uniform bdfx_materialParameters bdfx_frontMaterial;
uniform bdfx_materialParameters bdfx_backMaterial;

// Color material (simplified: on or off)
uniform int bdfx_colorMaterial;

// Sets the vertex normals to unit lengh.
uniform int bdfx_normalize;

// tex env color
uniform vec4 bdfx_textureEnvColor[ bdfx_maxTextureUnits ];

// TexGen TBD
// For now, a hack:
//   0 : No TexGen
//   1 : GL_SPHERE_MAP
uniform int bdfx_texGen[ bdfx_maxTextureCoords ];

// Texture TBD
// Just the basics for now, off or on.
uniform int bdfx_texture;

// 0 for off, 1 for on.
uniform int bdfx_pointSprite;

// Window dimensions
uniform vec2 bdfx_widthHeight;

// clip planes
uniform vec4 bdfx_clipPlane[ bdfx_maxClipPlanes ];
uniform int bdfx_clipPlaneEnable[ bdfx_maxClipPlanes ];

// eye planes
uniform vec4 bdfx_eyePlaneS[ bdfx_maxTextureCoords ];
uniform vec4 bdfx_eyePlaneT[ bdfx_maxTextureCoords ];
uniform vec4 bdfx_eyePlaneR[ bdfx_maxTextureCoords ];
uniform vec4 bdfx_eyePlaneQ[ bdfx_maxTextureCoords ];

// object planes
uniform vec4 bdfx_objectPlaneS[ bdfx_maxTextureCoords ];
uniform vec4 bdfx_objectPlaneT[ bdfx_maxTextureCoords ];
uniform vec4 bdfx_objectPlaneR[ bdfx_maxTextureCoords ];
uniform vec4 bdfx_objectPlaneQ[ bdfx_maxTextureCoords ];



//
// Interface between vertex and fragment shaders.
// Don't use GL2 predefined varyings, declare our own.
// This will allow us to use the same code in GL3.
varying vec4 bdfx_outColor;
varying vec4 bdfx_outSecondaryColor;
varying vec4 bdfx_outTexCoord[ bdfx_maxTextureCoords ];


//
// Useful for passing values from vertex to fragment shader
// in the course of shader debugging.
varying vec4 bdfx_debug;


// END gl2/ffp-declarations.common

